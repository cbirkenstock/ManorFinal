type Chat @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String
  chatImageUrl: String
  breadCrumb: String
  displayUserName: String
  displayUserProfileImageUrl: String
  displayUserVenmoHandle: String
  eventDateTime: AWSDateTime
  eventDescription: String
  eventLocation: String
  limit: Int
  lastMessage: String
  chatCreator: User @hasOne
  Members: [ChatUser] @hasMany(indexName: "customByChat", fields: ["id"])
  Messages: [Message] @hasMany(indexName: "byChat", fields: ["id"])
  eventChats: [Chat] @hasMany
  isGroupChat: Boolean
  isCoreChat: Boolean
  isCoordinationChat: Boolean
  isEventChat: Boolean
  membersCount: Int
  parentChat1ID: String
  parentChat2ID: String
  editedEventID: String
  isDeactivated: Boolean
}

type Subscription {
  onUpdateChatByID(id: String!): Chat @aws_subscribe(mutations: ["updateChat"])
}

type ChatUser @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userID: ID! @index(name: "byUserID", queryField: "byUserID")
  chatID: ID! @index(name: "customByChat")
  user: User! @belongsTo(fields: ["userID"])
  chat: Chat! @belongsTo(fields: ["chatID"])
  isOfActiveChat: Boolean!
  notificationsEnabled: Boolean!
  nickname: String
  hasUnreadMessage: Boolean
  hasUnreadAnnouncement: Boolean
  unreadMessagesCount: Int
  isAdmin: Boolean
  writtenMessages: [Message] @hasMany(indexName: "byChatUser", fields: ["id"])
  unreadAnnouncements: [PendingAnnouncement]
    @hasMany(indexName: "announcementsByChatUser", fields: ["id"])
  reactions: [Reaction]
    @hasMany(indexName: "reactionsByChatUser", fields: ["id"])
  profileImageUrl: String
}

type PendingAnnouncement @model @auth(rules: [{ allow: public }]) {
  id: ID!
  chatUserID: ID! @index(name: "announcementsByChatUser")
  messageID: ID!
  chatUser: ChatUser! @belongsTo(fields: ["chatUserID"])
  message: Message! @belongsTo(fields: ["messageID"])
  remindDate: AWSDateTime
}

type Reaction @model @auth(rules: [{ allow: public }]) {
  id: ID!
  chatUserID: ID! @index(name: "reactionsByChatUser")
  messageID: ID!
  chatUser: ChatUser! @belongsTo(fields: ["chatUserID"])
  message: Message! @belongsTo(fields: ["messageID"])
  reactionType: String!
}

type Report @model @auth(rules: [{ allow: public }]) {
  id: ID!
  reportedUserID: String
  lastFiveMessages: String
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  cognitoUserSub: String!
  name: String!
  phoneNumber: AWSPhone!
  profileImageUrl: String
  venmoHandle: String
  badgeCount: String
  chats: [ChatUser] @hasMany(fields: ["id"])
  expoPushToken: String
}

type Message @model @auth(rules: [{ allow: public }]) {
  id: ID!
  marginTop: Int
  timeCardDateTime: String
  isEventMessage: Boolean
  eventChatID: String
  eventTitle: String
  eventDateTime: AWSDateTime
  eventDescription: String
  eventLocation: String
  eventCapacity: Int
  eventMembersCount: Int
  suggestionStatus: String
  messageBody: String
  isAnnouncementMessage: Boolean
  announcementBody: String
  imageUrl: String
  chatID: ID
    @index(name: "byChat", queryField: "byChat", sortKeyFields: ["createdAt"])
  chatuserID: ID @index(name: "byChatUser")
  unreachedMembers: [PendingAnnouncement] @hasMany(fields: ["id"])
  reactions: [Reaction] @hasMany(fields: ["id"])
  likes: Int
  dislikes: Int
  link: AWSURL
  isMandatory: Boolean
  imageHeight: Int
  imageWidth: Int
  isAccepted: Boolean
  dateSuggestion: AWSDateTime
  remindDate: AWSDateTime
  replyToMessageID: ID
  replyToMessageSenderName: String
  replyToMessageBody: String
  replyToMessageImageUrl: String
  urlPreviewImageUrl: String
  urlPreviewTitle: String
  urlPreviewWebsiteUrl: String
  createdAt: String!
}
